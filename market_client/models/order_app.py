# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderApp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_key_id': 'str',
        'cycle': 'int',
        'eid': 'str',
        'ent_logo': 'str',
        'ent_name': 'str',
        'fee': 'float',
        'name': 'str',
        'version': 'str'
    }

    attribute_map = {
        'app_key_id': 'app_key_id',
        'cycle': 'cycle',
        'eid': 'eid',
        'ent_logo': 'ent_logo',
        'ent_name': 'ent_name',
        'fee': 'fee',
        'name': 'name',
        'version': 'version'
    }

    def __init__(self, app_key_id=None, cycle=None, eid=None, ent_logo=None, ent_name=None, fee=None, name=None, version=None):  # noqa: E501
        """OrderApp - a model defined in Swagger"""  # noqa: E501

        self._app_key_id = None
        self._cycle = None
        self._eid = None
        self._ent_logo = None
        self._ent_name = None
        self._fee = None
        self._name = None
        self._version = None
        self.discriminator = None

        if app_key_id is not None:
            self.app_key_id = app_key_id
        if cycle is not None:
            self.cycle = cycle
        if eid is not None:
            self.eid = eid
        if ent_logo is not None:
            self.ent_logo = ent_logo
        if ent_name is not None:
            self.ent_name = ent_name
        if fee is not None:
            self.fee = fee
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version

    @property
    def app_key_id(self):
        """Gets the app_key_id of this OrderApp.  # noqa: E501


        :return: The app_key_id of this OrderApp.  # noqa: E501
        :rtype: str
        """
        return self._app_key_id

    @app_key_id.setter
    def app_key_id(self, app_key_id):
        """Sets the app_key_id of this OrderApp.


        :param app_key_id: The app_key_id of this OrderApp.  # noqa: E501
        :type: str
        """

        self._app_key_id = app_key_id

    @property
    def cycle(self):
        """Gets the cycle of this OrderApp.  # noqa: E501


        :return: The cycle of this OrderApp.  # noqa: E501
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this OrderApp.


        :param cycle: The cycle of this OrderApp.  # noqa: E501
        :type: int
        """

        self._cycle = cycle

    @property
    def eid(self):
        """Gets the eid of this OrderApp.  # noqa: E501


        :return: The eid of this OrderApp.  # noqa: E501
        :rtype: str
        """
        return self._eid

    @eid.setter
    def eid(self, eid):
        """Sets the eid of this OrderApp.


        :param eid: The eid of this OrderApp.  # noqa: E501
        :type: str
        """

        self._eid = eid

    @property
    def ent_logo(self):
        """Gets the ent_logo of this OrderApp.  # noqa: E501


        :return: The ent_logo of this OrderApp.  # noqa: E501
        :rtype: str
        """
        return self._ent_logo

    @ent_logo.setter
    def ent_logo(self, ent_logo):
        """Sets the ent_logo of this OrderApp.


        :param ent_logo: The ent_logo of this OrderApp.  # noqa: E501
        :type: str
        """

        self._ent_logo = ent_logo

    @property
    def ent_name(self):
        """Gets the ent_name of this OrderApp.  # noqa: E501


        :return: The ent_name of this OrderApp.  # noqa: E501
        :rtype: str
        """
        return self._ent_name

    @ent_name.setter
    def ent_name(self, ent_name):
        """Sets the ent_name of this OrderApp.


        :param ent_name: The ent_name of this OrderApp.  # noqa: E501
        :type: str
        """

        self._ent_name = ent_name

    @property
    def fee(self):
        """Gets the fee of this OrderApp.  # noqa: E501


        :return: The fee of this OrderApp.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this OrderApp.


        :param fee: The fee of this OrderApp.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def name(self):
        """Gets the name of this OrderApp.  # noqa: E501


        :return: The name of this OrderApp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderApp.


        :param name: The name of this OrderApp.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this OrderApp.  # noqa: E501


        :return: The version of this OrderApp.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OrderApp.


        :param version: The version of this OrderApp.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderApp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderApp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
