# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderSvcProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cycle': 'int',
        'eid': 'str',
        'fee': 'float',
        'logo': 'str',
        'name': 'str'
    }

    attribute_map = {
        'cycle': 'cycle',
        'eid': 'eid',
        'fee': 'fee',
        'logo': 'logo',
        'name': 'name'
    }

    def __init__(self, cycle=None, eid=None, fee=None, logo=None, name=None):  # noqa: E501
        """OrderSvcProvider - a model defined in Swagger"""  # noqa: E501

        self._cycle = None
        self._eid = None
        self._fee = None
        self._logo = None
        self._name = None
        self.discriminator = None

        if cycle is not None:
            self.cycle = cycle
        if eid is not None:
            self.eid = eid
        if fee is not None:
            self.fee = fee
        if logo is not None:
            self.logo = logo
        if name is not None:
            self.name = name

    @property
    def cycle(self):
        """Gets the cycle of this OrderSvcProvider.  # noqa: E501


        :return: The cycle of this OrderSvcProvider.  # noqa: E501
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this OrderSvcProvider.


        :param cycle: The cycle of this OrderSvcProvider.  # noqa: E501
        :type: int
        """

        self._cycle = cycle

    @property
    def eid(self):
        """Gets the eid of this OrderSvcProvider.  # noqa: E501


        :return: The eid of this OrderSvcProvider.  # noqa: E501
        :rtype: str
        """
        return self._eid

    @eid.setter
    def eid(self, eid):
        """Sets the eid of this OrderSvcProvider.


        :param eid: The eid of this OrderSvcProvider.  # noqa: E501
        :type: str
        """

        self._eid = eid

    @property
    def fee(self):
        """Gets the fee of this OrderSvcProvider.  # noqa: E501


        :return: The fee of this OrderSvcProvider.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this OrderSvcProvider.


        :param fee: The fee of this OrderSvcProvider.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def logo(self):
        """Gets the logo of this OrderSvcProvider.  # noqa: E501


        :return: The logo of this OrderSvcProvider.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this OrderSvcProvider.


        :param logo: The logo of this OrderSvcProvider.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this OrderSvcProvider.  # noqa: E501


        :return: The name of this OrderSvcProvider.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderSvcProvider.


        :param name: The name of this OrderSvcProvider.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderSvcProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderSvcProvider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
